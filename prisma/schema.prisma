generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id Int @id @default(autoincrement())

  username String @unique
  password String

  name        String
  email       String
  phoneNumber String?
  sex         Gender?
  dateOfBirth DateTime?
  address     String?
  avatar      String?

  refreshTokens     RefreshToken[]
  expenses          Expense[]
  categories        Category[]
  exportedDataFiles ExportedDataFile[]
  notifications     Notification[]
  AIChatSessions    AIChatSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("user")
}

model RefreshToken {
  id Int @id @default(autoincrement())

  token     String   @unique

  userId    Int  
  user      User     @relation(fields: [userId], references: [id])

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token]) // Index for fast lookups

  @@map("refresh_token")
}

model Category {
  id Int @id @default(autoincrement())

  name  String
  image String?
  limit Int?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  expenses Expense[] @relation("CategoryToExpense")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("category")
}

model Expense {
  id Int @id @default(autoincrement())

  value       Int
  description String?
  date        DateTime

  user   User @relation(fields: [userId], references: [id])
  userId Int

  category   Category? @relation("CategoryToExpense", fields: [categoryId], references: [id])
  categoryId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("expense")
}

model FinancialTip {
  id Int @id @default(autoincrement())

  title       String
  author      String
  authorImage String?
  date        DateTime @default(now())
  type        String
  content     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("financial_tip")
}

model ExportedDataFile {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  fileName String
  filePath String
  fileType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("exported_data_file")
}

model Notification {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  title   String
  content String
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("notification")
}

model AIChatSession {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("ai_chat_session")
}

enum Sender {
  USER
  AI
}

model Message {
  id Int @id @default(autoincrement())

  session   AIChatSession @relation(fields: [sessionId], references: [id])
  sessionId Int

  sender  Sender
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("message")
}
